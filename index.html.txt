<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>PWA HTML Viewer</title>
  <link rel="manifest" href="manifest.json" />
  <meta name="theme-color" content="#2d2d2d" />
  <style>
    body {
      margin: 0;
      font-family: sans-serif;
      background: #f8f8f8;
      display: flex;
      flex-direction: column;
      height: 100vh;
    }
    header {
      background: #2d2d2d;
      color: #fff;
      padding: 1rem;
      text-align: center;
    }
    main {
      flex: 1;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 1rem;
    }
    input[type="file"] {
      margin-bottom: 1rem;
    }
    iframe {
      flex: 1;
      width: 100%;
      border: none;
      min-height: 500px;
    }
  </style>
</head>
<body>
  <header>
    <h1>HTML Viewer (PWA)</h1>
  </header>
  <main>
    <input type="file" accept=".html,.htm" id="fileInput" />
    <iframe id="preview"></iframe>
  </main>

  <script>
    // File reading and display
    document.getElementById('fileInput').addEventListener('change', function () {
      const file = this.files[0];
      if (!file) return;

      const reader = new FileReader();
      reader.onload = function (e) {
        const iframe = document.getElementById('preview');
        const doc = iframe.contentWindow.document;
        doc.open();
        doc.write(e.target.result);
        doc.close();
      };
      reader.readAsText(file);
    });

    // Register service worker
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('sw.js').then(() => {
        console.log('Service Worker Registered');
      });
    }
  </script>

  <!-- Manifest -->
  <script type="application/json" id="manifest-data">
  {
    "name": "HTML Viewer",
    "short_name": "HTMLViewer",
    "start_url": ".",
    "display": "standalone",
    "background_color": "#ffffff",
    "theme_color": "#2d2d2d",
    "icons": [{
      "src": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%232d2d2d'/%3E%3Ctext x='50' y='55' font-size='45' text-anchor='middle' fill='white' font-family='Arial'%3E&lt;%2F%3E%3C/text%3E%3C/svg%3E",
      "sizes": "192x192",
      "type": "image/svg+xml"
    }]
  }
  </script>
  <script>
    // Dynamically create manifest link
    const manifestBlob = new Blob(
      [document.getElementById("manifest-data").textContent],
      { type: "application/json" }
    );
    const manifestURL = URL.createObjectURL(manifestBlob);
    const manifestLink = document.querySelector("link[rel='manifest']");
    manifestLink.setAttribute("href", manifestURL);
  </script>

  <!-- Service Worker -->
  <script type="text/javascript">
    // Inline service worker creation
    const swCode = `
      self.addEventListener('install', event => {
        event.waitUntil(
          caches.open('html-viewer-cache').then(cache => {
            return cache.addAll(['.', 'index.html']);
          })
        );
        self.skipWaiting();
      });

      self.addEventListener('fetch', event => {
        event.respondWith(
          caches.match(event.request).then(response => {
            return response || fetch(event.request);
          })
        );
      });
    `;
    const swBlob = new Blob([swCode], { type: 'application/javascript' });
    const swURL = URL.createObjectURL(swBlob);
    navigator.serviceWorker.register(swURL);
  </script>
</body>
</html>